{"remainingRequest":"D:\\xampp\\htdocs\\coba_vuecli\\vuesax\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js!D:\\xampp\\htdocs\\coba_vuecli\\vuesax\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\xampp\\htdocs\\coba_vuecli\\vuesax\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\xampp\\htdocs\\coba_vuecli\\vuesax\\src\\views\\components\\extra-components\\tree\\TreeAsyncTree.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\xampp\\htdocs\\coba_vuecli\\vuesax\\src\\views\\components\\extra-components\\tree\\TreeAsyncTree.vue","mtime":1555491422000},{"path":"D:\\xampp\\htdocs\\coba_vuecli\\vuesax\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\coba_vuecli\\vuesax\\node_modules\\@vue\\cli-plugin-babel\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\coba_vuecli\\vuesax\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\xampp\\htdocs\\coba_vuecli\\vuesax\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"D:\\\\xampp\\\\htdocs\\\\coba_vuecli\\\\vuesax\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\xampp\\\\htdocs\\\\coba_vuecli\\\\vuesax\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { VTree, VSelectTree } from 'vue-tree-halower';\nexport default {\n  data: function data() {\n    return {\n      initSelected: ['node-1'],\n      treeData: [{\n        title: 'node1',\n        expanded: false,\n        async: true\n      }]\n    };\n  },\n  methods: {\n    nodechecked: function nodechecked(node, v) {\n      alert('that a node-check envent ...' + node.title + v);\n    },\n    asyncLoad: function () {\n      var _asyncLoad = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(node) {\n        var _node$children;\n\n        var _node$checked, checked, pro;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _node$checked = node.checked, checked = _node$checked === void 0 ? false : _node$checked;\n                this.$set(node, 'loading', true);\n                _context.next = 4;\n                return new Promise(function (resolve) {\n                  setTimeout(resolve, 2000, [{\n                    title: 'test1',\n                    async: true\n                  }, {\n                    title: 'test2',\n                    async: true\n                  }, {\n                    title: 'test3'\n                  }]);\n                });\n\n              case 4:\n                pro = _context.sent;\n\n                if (!node.hasOwnProperty('children')) {\n                  this.$set(node, 'children', []);\n                }\n\n                (_node$children = node.children).push.apply(_node$children, _toConsumableArray(pro));\n\n                this.$set(node, 'loading', false);\n\n                if (checked) {\n                  this.$refs.tree.childCheckedHandle(node, checked);\n                }\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function asyncLoad(_x) {\n        return _asyncLoad.apply(this, arguments);\n      };\n    }()\n  },\n  components: {\n    VTree: VTree,\n    VSelectTree: VSelectTree\n  }\n};",{"version":3,"sources":["TreeAsyncTree.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA,SAAA,KAAA,EAAA,WAAA,QAAA,kBAAA;AAEA,eAAA;AACA,EAAA,IADA,kBACA;AACA,WAAA;AACA,MAAA,YAAA,EAAA,CAAA,QAAA,CADA;AAEA,MAAA,QAAA,EAAA,CAAA;AACA,QAAA,KAAA,EAAA,OADA;AAEA,QAAA,QAAA,EAAA,KAFA;AAGA,QAAA,KAAA,EAAA;AAHA,OAAA;AAFA,KAAA;AAQA,GAVA;AAWA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,uBACA,IADA,EACA,CADA,EACA;AACA,MAAA,KAAA,CAAA,iCAAA,IAAA,CAAA,KAAA,GAAA,CAAA,CAAA;AACA,KAHA;AAIA,IAAA,SAJA;AAAA;AAAA;AAAA,+CAIA,IAJA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCAKA,IALA,CAKA,OALA,EAKA,OALA,8BAKA,KALA;AAMA,qBAAA,IAAA,CAAA,IAAA,EAAA,SAAA,EAAA,IAAA;AANA;AAAA,uBAOA,IAAA,OAAA,CAAA,UAAA,OAAA,EAAA;AACA,kBAAA,UAAA,CAAA,OAAA,EAAA,IAAA,EAAA,CAAA;AAAA,oBAAA,KAAA,EAAA,OAAA;AAAA,oBAAA,KAAA,EAAA;AAAA,mBAAA,EAAA;AAAA,oBAAA,KAAA,EAAA,OAAA;AAAA,oBAAA,KAAA,EAAA;AAAA,mBAAA,EAAA;AAAA,oBAAA,KAAA,EAAA;AAAA,mBAAA,CAAA,CAAA;AACA,iBAFA,CAPA;;AAAA;AAOA,gBAAA,GAPA;;AAUA,oBAAA,CAAA,IAAA,CAAA,cAAA,CAAA,UAAA,CAAA,EAAA;AACA,uBAAA,IAAA,CAAA,IAAA,EAAA,UAAA,EAAA,EAAA;AACA;;AACA,kCAAA,IAAA,CAAA,QAAA,EAAA,IAAA,0CAAA,GAAA;;AACA,qBAAA,IAAA,CAAA,IAAA,EAAA,SAAA,EAAA,KAAA;;AACA,oBAAA,OAAA,EAAA;AACA,uBAAA,KAAA,CAAA,IAAA,CAAA,kBAAA,CAAA,IAAA,EAAA,OAAA;AACA;;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,GAXA;AA+BA,EAAA,UAAA,EAAA;AACA,IAAA,KAAA,EAAA,KADA;AAEA,IAAA,WAAA,EAAA;AAFA;AA/BA,CAAA","sourcesContent":["<template>\n  <vx-card title=\"Async Tree\" code-toggler>\n    <v-tree ref=\"tree\" :data='treeData' :multiple='false' @node-check='nodechecked' @async-load-nodes='asyncLoad'/>\n\n    <template slot=\"codeContainer\">\n&lt;tempalte&gt;\n  &lt;v-tree ref=&quot;tree&quot; :data=&apos;treeData&apos; :multiple=&apos;false&apos; @node-check=&apos;nodechecked&apos; @async-load-nodes=&apos;asyncLoad&apos;/&gt;\n&lt;/tempalte&gt;\n\n&lt;script&gt;\nimport { VTree, VSelectTree}  from &apos;vue-tree-halower&apos;\n\nexport default {\n  data() {\n    return {\n      initSelected: [&apos;node-1&apos;],\n      treeData: [{\n        title: &apos;node1&apos;,\n        expanded: false,\n        async: true\n      }]\n    }\n  },\n  methods: {\n    nodechecked (node, v) {\n      alert(&apos;that a node-check envent ...&apos; + node.title + v)\n    },\n    async asyncLoad (node) {\n      const {checked = false} = node\n      this.$set(node, &apos;loading&apos;, true)\n      let pro = await new Promise(resolve =&gt; {\n        setTimeout(resolve, 2000, [{title: &apos;test1&apos;, async: true}, {title: &apos;test2&apos;, async: true}, {title: &apos;test3&apos;}])\n      })\n      if (!node.hasOwnProperty(&apos;children&apos;)) {\n        this.$set(node, &apos;children&apos;, [])\n      }\n      node.children.push(...pro)\n      this.$set(node, &apos;loading&apos;, false)\n      if (checked) {\n        this.$refs.tree.childCheckedHandle(node, checked)\n      }\n    },\n  },\n  components: {\n    VTree,\n    VSelectTree\n  }\n}\n&lt;/script&gt;\n    </template>\n  </vx-card>\n</template>\n\n<script>\nimport { VTree, VSelectTree}  from 'vue-tree-halower'\n\nexport default {\n  data() {\n    return {\n      initSelected: ['node-1'],\n      treeData: [{\n        title: 'node1',\n        expanded: false,\n        async: true\n      }]\n    }\n  },\n  methods: {\n    nodechecked (node, v) {\n      alert('that a node-check envent ...' + node.title + v)\n    },\n    async asyncLoad (node) {\n      const {checked = false} = node\n      this.$set(node, 'loading', true)\n      let pro = await new Promise(resolve => {\n        setTimeout(resolve, 2000, [{title: 'test1', async: true}, {title: 'test2', async: true}, {title: 'test3'}])\n      })\n      if (!node.hasOwnProperty('children')) {\n        this.$set(node, 'children', [])\n      }\n      node.children.push(...pro)\n      this.$set(node, 'loading', false)\n      if (checked) {\n        this.$refs.tree.childCheckedHandle(node, checked)\n      }\n    },\n  },\n  components: {\n    VTree,\n    VSelectTree\n  }\n}\n</script>\n"],"sourceRoot":"src/views/components/extra-components/tree"}]}